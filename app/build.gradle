import com.google.gms.googleservices.GoogleServicesPlugin

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    id 'com.google.devtools.ksp' version '2.3.0'
    id("com.google.gms.google-services")
    id("com.google.firebase.crashlytics") version "3.0.6"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('release-keystore.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace 'com.mobilerpgpack.phone'
    compileSdk versions.target_sdk

    flavorDimensions "store"
    productFlavors {
        googleOpenGLES3_2 {
            dimension "store"
            buildConfigField "boolean", "LEGACY_GLES2", "false"
            manifestPlaceholders = [gles3Required: "true"]
            externalNativeBuild {
                cmake {
                    arguments "-DLEGACY_GLES2=false"
                }
            }
        }
        fdroidOpenGLES3_2 {
            dimension "store"
            buildConfigField "boolean", "LEGACY_GLES2", "false"
            manifestPlaceholders = [gles3Required: "true"]
            externalNativeBuild {
                cmake {
                    arguments "-DLEGACY_GLES2=false"
                }
            }
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
        googleOpenGLES2_0 {
            dimension "store"
            buildConfigField "boolean", "LEGACY_GLES2", "true"
            manifestPlaceholders = [gles3Required: "false"]
            externalNativeBuild {
                cmake {
                    arguments "-DLEGACY_GLES2=true"
                }
            }
        }
        fdroidOpenGLES2_0 {
            dimension "store"
            buildConfigField "boolean", "LEGACY_GLES2", "true"
            manifestPlaceholders = [gles3Required: "false"]
            externalNativeBuild {
                cmake {
                    arguments "-DLEGACY_GLES2=true"
                }
            }
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
    }

    googleServices {
        disableVersionCheck = true
        missingGoogleServicesStrategy = GoogleServicesPlugin.MissingGoogleServicesStrategy.WARN
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    defaultConfig {
        applicationId versions.app_package_name
        minSdk versions.min_sdk
        targetSdk versions.target_sdk
        versionCode versions.app_version_code
        versionName versions.app_version_name

        ndk {
            abiFilters = abi_filters
        }

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_PLATFORM=android-$versions.native_android_platform_version",
                        "-DCMAKE_CXX_FLAGS=$build_flags.CMAKE_CXXFLAGS -fno-stack-protector -fno-builtin -U_FORTIFY_SOURCE -fno-delete-null-pointer-checks " +
                                "-fno-strict-aliasing -Wno-c++11-narrowing",
                        "-DCMAKE_C_FLAGS=$build_flags.CMAKE_CFLAGS -fno-stack-protector -fno-builtin -U_FORTIFY_SOURCE -fno-delete-null-pointer-checks " +
                                "-fno-strict-aliasing",
                        "-DCMAKE_SHARED_LINKER_FLAGS=$build_flags.CMAKE_SHADERLINKER_FLAGS",
                        "-DCMAKE_VERBOSE_MAKEFILE=OFF"
            }
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            def appName = "Engines_Hub"
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def buildType = variant.buildType.name
            def flavor = variant.flavorName
            def date = new Date().format("yyyy_MM_dd_HH_mm")
            outputFileName = "${appName}_${flavor}_${buildType}_v${versionName}_b${versionCode}_${date}.apk"
        }
    }

    externalNativeBuild {
        cmake {
            path "$rootProject.rootDir/CMakeLists.txt"
            version versions.cmake_version
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            aaptOptions {
                noCompress "bin","spm","json","txt","sf2","ttf","wad"
            }
            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
            }
        }
        debug {
            jniDebuggable true
            ndk {
                debugSymbolLevel 'FULL'
            }
            signingConfig signingConfigs.debug
            aaptOptions {
                noCompress "bin","spm","json","txt","sf2","ttf", "wad"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
        buildConfig true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.15'
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }
    buildToolsVersion versions.build_tools_version
    ndkVersion versions.ndk_version
}

preBuild.dependsOn ':third_party:fluidsynth:build',':machine_translator:CTranslate2Proxy:build',
        ':machine_translator:Translator:build', ':third_party:sdl2:android-project:app:build', ':third_party:openal:build',
        ':third_party:sdl2-mixer:build',':third_party:sdl2-ttf:build', ':third_party:NG-GL4ES:build',
        ':third_party:libpng:build',':third_party:sdl3:android-project:app:build',
        ':third_party:fmod:build',':third_party:legacy_gl4es:build'

dependencies {
    implementation project(':third_party:sdl2:android-project:app')
    implementation (project(":third_party:openal"))
    implementation(project(":third_party:sdl2-mixer"))
    implementation(project(":third_party:fluidsynth"))
    implementation (project(":third_party:sdl2-ttf"))
    implementation (project(":machine_translator:CTranslate2Proxy"))
    implementation (project(":machine_translator:Translator"))
    implementation (project(":third_party:NG-GL4ES"))
    implementation (project(":third_party:libpng"))
    implementation (project(":third_party:sdl3:android-project:app"))
    implementation (project(":third_party:fmod"))
    implementation (project(":third_party:bing_translator"))
    implementation (project(":third_party:legacy_gl4es"))
    implementation (project(":third_party:storage-chooser:storagechooser"))

    implementation(project.dependencies.platform("io.insert-koin:koin-bom:4.1.1"))
    implementation(libs.koin.core)
    implementation(libs.koin.annotations)
    implementation(libs.koin.android)
    implementation(libs.koin.androidx.compose)
    implementation(libs.koin.androidx.compose.navigation)
    implementation(libs.koin.core.coroutines)
    implementation(libs.koin.androidx.startup)
    ksp(libs.koin.ksp.compiler)
    implementation(libs.jna){ artifact { type = "aar" } }
    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.crashlytics.ndk)
    implementation(libs.firebase.analytics)
    implementation libs.androidx.compose.material.icons.core.android
    implementation libs.androidx.compose.material.icons.extended.android
    implementation libs.converter.gson
    implementation libs.gson
    compileOnly libs.projectlombok.lombok
    annotationProcessor libs.projectlombok.lombok
    implementation(libs.retrofit)
    implementation (libs.androidx.room.runtime)
    ksp libs.androidx.room.compiler
    implementation (libs.androidx.room.ktx)
    implementation (libs.translate)
    implementation (libs.kotlinx.coroutines.play.services)
    implementation(libs.okhttp)
    implementation (libs.core)
    implementation(libs.zip4j)
    implementation (libs.androidx.lifecycle.viewmodel.compose)
    implementation (libs.androidx.lifecycle.viewmodel.ktx)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.datastore.preferences)
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.androidx.fragment.ktx
    implementation libs.androidx.preference.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.navigation.compose
}