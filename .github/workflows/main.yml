name: Android Nightly Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CMAKE_VERSION: 4.1.2
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      GRADLE_OPTS: -Dorg.gradle.daemon=false

    steps:
    - name: Checkout code with submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0

    - name: Force update submodules
      run: |
        git submodule sync --recursive
        git submodule update --init --force --recursive
        git lfs install
        git lfs fetch --all && git lfs checkout

    - name: Cache Gradle
      uses: actions/cache@v3
      id: gradle-cache
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Set up JDK 24
      uses: actions/setup-java@v3
      with:
        java-version: 24
        distribution: 'temurin'

    - name: Install system dependencies
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install unzip wget git git-lfs

    - name: Setup Android SDK
      if: steps.sdk-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p $ANDROID_SDK_ROOT
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-*.zip -d $ANDROID_SDK_ROOT/cmdline-tools
        mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest
        echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH

    - name: Accept licenses and install SDK components
      if: steps.sdk-cache.outputs.cache-hit != 'true'
      run: |
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-36" "build-tools;36.1.0" "platform-tools" "cmake;4.1.2"
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV

    - name: Download and setup CMake (fallback)
      if: steps.sdk-cache.outputs.cache-hit != 'true'
      run: |
        wget -q https://github.com/Kitware/CMake/releases/download/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-Linux-x86_64.tar.gz
        tar -xzf cmake-${{ env.CMAKE_VERSION }}-Linux-x86_64.tar.gz
        echo "FALLBACK_CMAKE_PATH=${{ github.workspace }}/cmake-${{ env.CMAKE_VERSION }}-Linux-x86_64" >> $GITHUB_ENV

    - name: Configure CMake path
      run: |
        if [ -d "$ANDROID_SDK_ROOT/cmake/4.1.2" ]; then
          echo "Using SDK CMake"
          echo "cmake.dir=$ANDROID_SDK_ROOT/cmake/4.1.2" >> local.properties
        elif [ -n "$FALLBACK_CMAKE_PATH" ]; then
          echo "Using fallback CMake"
          echo "cmake.dir=$FALLBACK_CMAKE_PATH" >> local.properties
        else
          echo "CMake not found! Installing..."
          wget -q https://github.com/Kitware/CMake/releases/download/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-Linux-x86_64.tar.gz
          tar -xzf cmake-*.tar.gz
          echo "cmake.dir=${{ github.workspace }}/cmake-${{ env.CMAKE_VERSION }}-Linux-x86_64" >> local.properties
        fi
        
        CMAKE_PATH=$(grep 'cmake.dir' local.properties | cut -d'=' -f2)
        echo "$CMAKE_PATH/bin" >> $GITHUB_PATH
        echo "CMake path: $CMAKE_PATH"
        
    - name: Grant gradlew permissions
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew assembleFdroidRelease --stacktrace --info
      env:
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: engines_hub_nightly
        path: |
          app/build/outputs/apk/fdroid/release/*.apk
        if-no-files-found: error